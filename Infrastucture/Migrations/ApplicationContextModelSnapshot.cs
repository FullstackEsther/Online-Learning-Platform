// <auto-generated />
using System;
using Infrastucture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastucture.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ParentCategory")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3b288e3-26c9-4f46-8fba-d52a2686ad0b"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 720, DateTimeKind.Local).AddTicks(5493),
                            Description = "Encompasses activities aimed at improving one's skills, knowledge, and career prospects",
                            Name = "Profesional Development"
                        },
                        new
                        {
                            Id = new Guid("04a2830d-9811-4984-9a2a-5a5904f5d957"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 720, DateTimeKind.Local).AddTicks(5549),
                            Description = "Encompass the creative expression and application of visual and artistic skills",
                            Name = "Art and Design"
                        },
                        new
                        {
                            Id = new Guid("53cd1fd7-8794-4190-8e23-c338b1e050e2"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 720, DateTimeKind.Local).AddTicks(5561),
                            Description = "Stands for Science, Technology, Engineering, and Mathematics. It encompasses a wide range of fields related to scientific and technological advancements",
                            Name = "STEM"
                        },
                        new
                        {
                            Id = new Guid("58a8cf1d-96f4-4d56-b8a2-6da394fba413"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 720, DateTimeKind.Local).AddTicks(5592),
                            Description = "Encompasses the study of various aspects of running a business,Involves understanding how to plan, organize, lead, and control business operations",
                            Name = "Business and Management"
                        },
                        new
                        {
                            Id = new Guid("4b1d8bdb-5974-4321-a620-4389a7f1f617"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 720, DateTimeKind.Local).AddTicks(5603),
                            Description = "Encompasses the study of human culture, society, and the arts",
                            Name = "Humanities"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chat.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("IsGroupChat")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ReceiverUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("RoomName")
                        .HasColumnType("longtext");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Domain.Entities.Chat.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("DisplayPicture")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double");

                    b.Property<double>("TotalTime")
                        .HasColumnType("double");

                    b.Property<string>("WhatToLearn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Domain.Entities.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Biography")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Article")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("TotalMinutes")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<double>("TotalTime")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TrxRef")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Domain.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("IsPassedTest")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("QuestionAnswers")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Score")
                        .HasColumnType("double");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("585b4c55-95f2-4a63-895a-bfa0b1731fc3"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 734, DateTimeKind.Local).AddTicks(9473),
                            Description = "Takes a course for better Understanding",
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = new Guid("d11bfd10-d65f-45f6-8e68-d5157fb4e80c"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 734, DateTimeKind.Local).AddTicks(9530),
                            Description = "Creates and owns a course ",
                            RoleName = "Instructor"
                        },
                        new
                        {
                            Id = new Guid("95431a3c-63cf-480d-9350-7a8f92f15c4f"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 734, DateTimeKind.Local).AddTicks(9563),
                            Description = "Takes a course for better Understanding",
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Biography")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ResetPasswordCode")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8374987-be9c-4099-91a6-a024754b7703"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 736, DateTimeKind.Local).AddTicks(5558),
                            Password = "Tolulope*1",
                            ResetPasswordCode = 0,
                            Username = "otufaleesther@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgresses");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9a5b636-31f2-4b83-abe8-2bdcaabf2783"),
                            CreatedBy = "Admin",
                            CreatedOn = new DateTime(2024, 8, 27, 7, 23, 44, 737, DateTimeKind.Local).AddTicks(7057),
                            RoleId = new Guid("95431a3c-63cf-480d-9350-7a8f92f15c4f"),
                            UserId = new Guid("e8374987-be9c-4099-91a6-a024754b7703")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chat.Message", b =>
                {
                    b.HasOne("Domain.Entities.Chat.ChatRoom", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithOne("Enrollment")
                        .HasForeignKey("Domain.Entities.Enrollment", "PaymentId");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Payment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.HasOne("Domain.Entities.Module", "Module")
                        .WithOne("Quiz")
                        .HasForeignKey("Domain.Entities.Quiz", "ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Domain.Entities.Result", b =>
                {
                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("Result")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.UserProgress", b =>
                {
                    b.HasOne("Domain.Entities.Course", null)
                        .WithMany("UserProgresses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lesson", null)
                        .WithMany("UserProgresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("UserProgresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Chat.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Module", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Quiz")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Enrollment")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserProgresses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
